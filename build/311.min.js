angular.module("App.Directives", []).directive("map", [ "$window", function($window) {
    return {
        restrict: "E",
        scope: {
            complaintsData: "="
        },
        link: function($scope, $elem, ctrl) {
            var map, infowindow = new google.maps.InfoWindow(), initialLocation = new google.maps.LatLng(47.6101, -122.342);
            navigator.geolocation && navigator.geolocation.getCurrentPosition(function(position) {
                initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude), 
                map.setCenter(initialLocation);
            });
            var mapOptions = {
                zoom: 15,
                center: initialLocation
            }, markers = [];
            map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions), $scope.$watch(function() {
                return $scope.complaintsData;
            }, function() {
                function addComplaintMarker(complaint) {
                    var myLatlng = new google.maps.LatLng(complaint.lat, complaint.lon), marker = new google.maps.Marker({
                        position: myLatlng,
                        map: map,
                        title: "Click to zoom",
                        data: complaint
                    });
                    google.maps.event.addListener(marker, "click", function() {
                        infowindow.setContent(complaint.getDisplayText()), infowindow.open(map, marker);
                    }), markers.push(marker);
                }
                for (var i = 0; i < markers.length; i++) markers[i].setMap(null);
                if ($scope.complaintsData) for (var i = 0; i < $scope.complaintsData.length; i++) addComplaintMarker($scope.complaintsData[i]);
            });
        },
        templateUrl: "/templates/map.html"
    };
} ]), !function() {
    angular.module("App.Complaints", []), // Todo - dependency ordering...
    angular.module("App.Directives");
    angular.module("App", [ "ngRoute", "App.Directives", "App.Complaints" ]);
}(), function() {
    var ComplaintFactory = function() {
        var Complaint = function() {
            return function(data) {
                function formatHtml(title, str) {
                    return "<h3>" + title + "&nbsp;" + str + "</h3>";
                }
                this.id = data.id, this.created_date = moment(data.created_date), this.closed_date = moment(data.closed_date), 
                this.response_time = moment.duration(this.closed_date.diff(this.created_date)).asHours(), 
                this.response_time = Math.round(100 * this.response_time) / 100, // (two decimal places)
                this.agency = data.agency, this.agency_name = data.agency_name, this.complaint_type = data.complaint_type, 
                this.descriptor = data.descriptor, this.status = data.status, this.due_date = data.due_date, 
                this.resolution_description = data.resolution_description, this.address_type = data.address_type, 
                this.city = data.city, this.landmark = data.landmark, this.facility_type = data.facility_type, 
                // Location
                this.borough = data.borough, this.x_coord = data.x_coord_state_plane, this.y_coord = data.y_coord_state_plane, 
                this.lat = data.latitude, this.lon = data.longitude, this.location_type = data.location_type, 
                this.incident_zip = data.incident_zip, this.incident_address = data.incident_address, 
                this.street_name = data.street_name, this.getDisplayText = function() {
                    var str = "";
                    return str += formatHtml("Date Created: ", this.created_date.format("MMMM Do YYYY, h:mm:ss a")), 
                    str += formatHtml("Date Closed: ", this.closed_date.format("MMMM Do YYYY, h:mm:ss a")), 
                    str += formatHtml("Response Time: ", this.response_time + " hours"), str += formatHtml("Reporting Agency: ", this.agency), 
                    str += formatHtml("Complaint Type: ", this.complaint_type), str += formatHtml("Address: ", this.incident_address), 
                    str += formatHtml("Description: ", this.descriptor);
                };
            };
        }();
        return Complaint;
    };
    angular.module("App").factory("ComplaintModel", [ ComplaintFactory ]);
}(), !function() {
    angular.module("App.Complaints").config([ "$routeProvider", function($routeProvider) {
        $routeProvider.when("/complaints", {
            templateUrl: "templates/complaints_template.html",
            controller: "complaintsController",
            controllerAs: "ctrl"
        }).otherwise({
            redirectTo: "/complaints"
        });
    } ]);
}(), function() {
    var ComplaintsController = function(complaintsService) {
        function _init() {
            complaintsService.getComplaintTypes().then(function(types) {
                ctrl.complaint_types = types;
            }), complaintsService.getComplaints("2015-01-01", "2015-01-31").then(function(complaints) {
                ctrl.complaintsData = complaints;
            }), $("#submit").on("click", function() {
                var startDate = ctrl.start_date, endDate = ctrl.end_date, complaint_type = ctrl.complaint_type;
                complaintsService.getComplaints(startDate, endDate, complaint_type).then(function(complaints) {
                    ctrl.complaintsData = complaints;
                });
            });
        }
        var ctrl = this;
        _init();
    };
    angular.module("App").controller("complaintsController", [ "complaintsService", ComplaintsController ]);
}(), function() {
    var ComplaintsService = function($q, $http, ComplaintModel) {
        function getComplaints(startDate, endDate, complaint_type) {
            var deferred = $q.defer(), req = {
                url: "/complaints",
                params: {
                    start: startDate,
                    end: endDate
                }
            };
            // todo...
            return complaint_type && (req.params.complaint_type = complaint_type.complaint_type), 
            $http(req).then(function(resp) {
                for (var complaintsDat = resp.data.rows, complaints = [], i = 1; i < complaintsDat.length; i++) complaints.push(new ComplaintModel(complaintsDat[i]));
                deferred.resolve(complaints);
            }), deferred.promise;
        }
        function getComplaintTypes() {
            var deferred = $q.defer(), req = {
                url: "/complaint_types"
            };
            return $http(req).then(function(resp) {
                var dat = resp.data.rows;
                deferred.resolve(dat);
            }), deferred.promise;
        }
        return {
            getComplaints: getComplaints,
            getComplaintTypes: getComplaintTypes
        };
    };
    angular.module("App").service("complaintsService", [ "$q", "$http", "ComplaintModel", ComplaintsService ]);
}();